package com.sb.controller;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.sb.entities.Customer;

@RestController
@RequestMapping("/kafka")
public class KafkaProviderController 
{
	private static final Logger logger = LogManager.getLogger(KafkaProviderController.class);

	@Autowired
	KafkaTemplate<String,Customer> kafkaTemplate;
	private static final String TOPIC_JSON="testKafkaTopic";
	@Autowired
	KafkaTemplate<String,String> kafkaTemplateOne;
	private static final String TOPIC="kafkaLearning";
	@PostMapping("/publish")
	public String publishCustomerInfo(@RequestBody Customer customer)
	{

		ListenableFuture<SendResult<String, Customer>> future = kafkaTemplate.send(TOPIC_JSON, customer);
		future.addCallback(new ListenableFutureCallback<SendResult<String, Customer>>() {

			@Override
			public void onSuccess(SendResult<String, Customer> result) {
				logger.info("Record sent is: " +result.getProducerRecord().value().toString());
				logger.info("Topic: " +result.getRecordMetadata().topic());
				logger.info("Partition: " +result.getRecordMetadata().partition());
				logger.info("Offset: " +result.getRecordMetadata().offset());
				logger.info("Timestamp: " +result.getRecordMetadata().timestamp());
			}

			@Override
			public void onFailure(Throwable ex) {
				logger.error("Error while sending data", ex);
			}


		});
		return "Customer published  successfully";
	}
	@GetMapping("/publish-string/{message}")
	public String sayHello(@PathVariable("message") String message)
	{
		ListenableFuture<SendResult<String, String>> future = kafkaTemplateOne.send(TOPIC, message);
		future.addCallback(new ListenableFutureCallback<SendResult<String, String>>() {

			@Override
			public void onSuccess(SendResult<String, String> result) {
				logger.info("Record sent is: " +result.getProducerRecord().value());
				logger.info("Topic: " +result.getRecordMetadata().topic());
				logger.info("Partition: " +result.getRecordMetadata().partition());
				logger.info("Offset: " +result.getRecordMetadata().offset());
				logger.info("Timestamp: " +result.getRecordMetadata().timestamp());
			}

			@Override
			public void onFailure(Throwable ex) {
				logger.error("Error while sending data", ex);
			}


		});
		return "published string successfully";
	}
}
